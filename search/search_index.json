{
    "docs": [
        {
            "location": "/",
            "text": "Perform advanced MiTM attacks on websites with ease.\n  \n\n\n\n\n\n\n  \n\n    \n\n      Test it out\n    \n\u00a0|\n    \n\n      Installation\n    \n\u00a0|\n    \n\n      Trello\n    \n\u00a0|\n    \n\n      Patreon\n    \n\n  \n\n  \n\n  \n\n    \n\n  \n\n  \n\n    \n\n  \n\n  \n\n    \n\n  \n\n\n\n\n\n\n\n\nIntroduction\n\u00b6\n\n\nInjectify is a web based MiTM tool, similiar to \nBeEF\n (although completely unrelated in terms of source code). It uses modern web technologies such as ReactJS, Redux, Typescript and Webpack.\n\n\nWhat can it do?\n\u00b6\n\n\n\n\n \nCreate a reverse Javascript shell between the victim and the attacker.\n\n\n \nPageGhost - see what's on the victims screen and interact with it in realtime\n\n\n Highly integrated Module platform, with a high-level API\n\n\n Data extraction API - record custom data\n\n\n Extracts and logs saved passwords from the browser.",
            "title": "Introduction"
        },
        {
            "location": "/#introduction",
            "text": "Injectify is a web based MiTM tool, similiar to  BeEF  (although completely unrelated in terms of source code). It uses modern web technologies such as ReactJS, Redux, Typescript and Webpack.",
            "title": "Introduction"
        },
        {
            "location": "/#what-can-it-do",
            "text": "Create a reverse Javascript shell between the victim and the attacker.    PageGhost - see what's on the victims screen and interact with it in realtime   Highly integrated Module platform, with a high-level API   Data extraction API - record custom data   Extracts and logs saved passwords from the browser.",
            "title": "What can it do?"
        },
        {
            "location": "/getting-started/installation/mongodb/",
            "text": "Tip\n\n\nFor simplicity and compatibility, we recommend using \nmLab\n with the Free plan. If you intend to have a lot of traffic you can also setup a \ndedicated database\n\n\n\n\n[Option 1]\n Creating an mLab database\n\u00b6\n\n\n\n\nHead over to \nmLab and create an account\n\n\n\n\n\n\nMake sure to \nverify your email\n, if you don't then it won't allow you to create a database\n\n\n\n\n\n\nClick on \nCreate new\n in the upper right corner\n\n\n\n\nSelect \nSandbox\n and then click \nContinue\n\n\nNew deployment\n\n\n\n\nSelect your preferred region and click \nContinue\n\n\n\n\nEnter \ninjectify\n as the database name, click \nContinue\n and then \nSubmit order\n\n\n\n\nClick on your new database and select \nUsers\n and then \nAdd database user\n\n\nAdd database user\n\n\n\n\nChoose a username and password and click \nCreate\n (make sure \nread-only\n is left unchecked)\n\n\n\n\n\n\n\n\n[Option 2]\n Setting up a dedicated MongoDB database\n\u00b6\n\n\nTodo",
            "title": "Creating a MongoDB database"
        },
        {
            "location": "/getting-started/installation/mongodb/#option-1-creating-an-mlab-database",
            "text": "Head over to  mLab and create an account    Make sure to  verify your email , if you don't then it won't allow you to create a database    Click on  Create new  in the upper right corner   Select  Sandbox  and then click  Continue  New deployment   Select your preferred region and click  Continue   Enter  injectify  as the database name, click  Continue  and then  Submit order   Click on your new database and select  Users  and then  Add database user  Add database user   Choose a username and password and click  Create  (make sure  read-only  is left unchecked)",
            "title": "[Option 1] Creating an mLab database"
        },
        {
            "location": "/getting-started/installation/mongodb/#option-2-setting-up-a-dedicated-mongodb-database",
            "text": "Todo",
            "title": "[Option 2] Setting up a dedicated MongoDB database"
        },
        {
            "location": "/getting-started/installation/github/",
            "text": "Note\n\n\nInjectify uses a GitHub SSO based system for authentication, instead of locally managing credentials. This makes it securer and adds the ability to utilise GitHub gists, repos etc.\n\n\n\n\n\n\nHead over to \nGitHub.com\n and create an account if you haven't already.\n\n\n\n\nCreate a \nnew GitHub application\n and specify the following values:\n\n\n\n\n\n\n\n\nField\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nApplication name\n\n\nany\n\n\n\n\n\n\nHomepage URL\n\n\nany\n\n\n\n\n\n\nApplication description\n\n\nany\n\n\n\n\n\n\nAuthorization callback URL\n\n\nhttps://injectify.samdd.me\n\n\n\n\n\n\n\n\nWhat it should look like",
            "title": "Creating a GitHub application"
        },
        {
            "location": "/getting-started/installation/configuration/",
            "text": "Tip\n\n\nIn order to actually use Injectify, you first have to setup the configuration file. In the future, you'll be able to do this from the web interface.\n\n\n\n\n\n\nClone this repo\n\n\nNavigate into the repo and copy \nserver.config.example.js\n to \nserver.config.js\n\n\nOpen \nserver.config.js\n in a text-editor\n\n\n\n\nReplace the GitHub \nclient_id\n and \nclient_secret\n values with your newly created applications ones.\n\n\nScreenshot of the GitHub configuration\n\n\n\n\n\n\nReplace the \nmongodb\n value with your newly created mLab URL (or dedicated MongoDB URI), in the format:\n    \nmongodb\n:\n//<dbuser>:<dbpassword>@XXXX.mlab.com:XXXX/injectify\n\n\nScreenshot of the MongoDB configuration",
            "title": "Configuration"
        },
        {
            "location": "/getting-started/installation/setting-up/",
            "text": "Note\n\n\nThis is where you actually install Injectify, you are required to have NodeJS pre-installed.\n\n\n\n\nPrerequisites\n\u00b6\n\n\n\n\nFollowed the previous steps\n\n\nNodeJS\n\n\nYarn package manager\n\n\n(Optional) \nA swap file\n - reason being that \nWebpack uses loads of memory\n\n\n\n\nInstalling\n\u00b6\n\n\nWindows\n\u00b6\n\n\nnpm i -g yarn\nyarn global add typescript\nyarn global add pm2\nyarn run install:all\nyarn run deploy\n\n\n\n\nLinux\n\u00b6\n\n\nsudo npm i -g yarn\nsudo yarn global add typescript\nsudo yarn global add pm2\nyarn run install:all\nyarn run deploy\n\n\n\n\n\n\nSuccess\n\n\nInjectify will now be running over at \nhttp://localhost:3000",
            "title": "Setting up the server"
        },
        {
            "location": "/getting-started/installation/setting-up/#prerequisites",
            "text": "Followed the previous steps  NodeJS  Yarn package manager  (Optional)  A swap file  - reason being that  Webpack uses loads of memory",
            "title": "Prerequisites"
        },
        {
            "location": "/getting-started/installation/setting-up/#installing",
            "text": "",
            "title": "Installing"
        },
        {
            "location": "/getting-started/installation/setting-up/#windows",
            "text": "npm i -g yarn\nyarn global add typescript\nyarn global add pm2\nyarn run install:all\nyarn run deploy",
            "title": "Windows"
        },
        {
            "location": "/getting-started/installation/setting-up/#linux",
            "text": "sudo npm i -g yarn\nsudo yarn global add typescript\nsudo yarn global add pm2\nyarn run install:all\nyarn run deploy   Success  Injectify will now be running over at  http://localhost:3000",
            "title": "Linux"
        },
        {
            "location": "/usage/console/",
            "text": "",
            "title": "Console"
        },
        {
            "location": "/usage/data/",
            "text": "",
            "title": "Data storage"
        },
        {
            "location": "/usage/project-config/roles/",
            "text": "Tip\n\n\nRoles allows you to control who can access your project and what they can do with it.\n\n\n\n\nAdding / removing users\n\u00b6\n\n\nIf you are an admin or an owner for a project, you can add any user on GitHub (even if they haven't used Injectify before). As soon as they sign in for the first time, they'll be able to access the projects you've gave them access to.\n\n\nManaging roles\nDifferent types of roles\n\u00b6\n\n\nBelow explains what the different roles are and what permissions they allow a user to have\n\n\nOwners\nThese users have full control over the project and can make any action they chose.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nAdmins\nThese users can manage who's able to access the project.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nView-only users\nThese users can view the project but can make any changes to it.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project",
            "title": "Managing users & roles"
        },
        {
            "location": "/usage/project-config/roles/#adding-removing-users",
            "text": "If you are an admin or an owner for a project, you can add any user on GitHub (even if they haven't used Injectify before). As soon as they sign in for the first time, they'll be able to access the projects you've gave them access to.  Managing roles",
            "title": "Adding / removing users"
        },
        {
            "location": "/usage/project-config/roles/#different-types-of-roles",
            "text": "Below explains what the different roles are and what permissions they allow a user to have  Owners These users have full control over the project and can make any action they chose.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project Admins These users can manage who's able to access the project.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project View-only users These users can view the project but can make any changes to it.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project",
            "title": "Different types of roles"
        },
        {
            "location": "/usage/project-config/filters/",
            "text": "Tip\n\n\nYour project's filters control which domains the payloads are allowed or disallowed to run on. This is good for if someone abuses your project or if you need to temporarily filter out some users.\n\n\n\n\nAdding / removing filters\n\u00b6\n\n\nIf you are an admin or an owner for a project, you can edit, add and remove filters.\n\n\nManaging filters\nDifferent types of roles\n\u00b6\n\n\nBelow explains what the different roles are and what permissions they allow a user to have\n\n\nOwners\nThese users have full control over the project and can make any action they chose.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nAdmins\nThese users can manage who's able to access the project.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nView-only users\nThese users can view the project but can make any changes to it.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project",
            "title": "Managing domain filters"
        },
        {
            "location": "/usage/project-config/filters/#adding-removing-filters",
            "text": "If you are an admin or an owner for a project, you can edit, add and remove filters.  Managing filters",
            "title": "Adding / removing filters"
        },
        {
            "location": "/usage/project-config/filters/#different-types-of-roles",
            "text": "Below explains what the different roles are and what permissions they allow a user to have  Owners These users have full control over the project and can make any action they chose.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project Admins These users can manage who's able to access the project.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project View-only users These users can view the project but can make any changes to it.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project",
            "title": "Different types of roles"
        },
        {
            "location": "/usage/project-config/api/",
            "text": "Tip\n\n\nYour project's API allows you to get a JSON-response of stuff like currently hooked browser, saved passwords and the keylogger keystrokes.\n\n\n\n\nAccessing the API\n\u00b6\n\n\nIf you have permission to access a project, you can simply navigate to the config page and select the appropiate button.\n\n\n\n\nWarning\n\n\nDo not share the links to your project's API to anyone. They include your GitHub user token, which grants access to information about your account.\n\n\n\n\nAPI buttons",
            "title": "Project API"
        },
        {
            "location": "/usage/project-config/api/#accessing-the-api",
            "text": "If you have permission to access a project, you can simply navigate to the config page and select the appropiate button.   Warning  Do not share the links to your project's API to anyone. They include your GitHub user token, which grants access to information about your account.   API buttons",
            "title": "Accessing the API"
        },
        {
            "location": "/usage/console/",
            "text": "",
            "title": "Console"
        },
        {
            "location": "/usage/data/",
            "text": "",
            "title": "Data storage"
        },
        {
            "location": "/usage/project-config/roles/",
            "text": "Tip\n\n\nRoles allows you to control who can access your project and what they can do with it.\n\n\n\n\nAdding / removing users\n\u00b6\n\n\nIf you are an admin or an owner for a project, you can add any user on GitHub (even if they haven't used Injectify before). As soon as they sign in for the first time, they'll be able to access the projects you've gave them access to.\n\n\nManaging roles\nDifferent types of roles\n\u00b6\n\n\nBelow explains what the different roles are and what permissions they allow a user to have\n\n\nOwners\nThese users have full control over the project and can make any action they chose.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nAdmins\nThese users can manage who's able to access the project.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nView-only users\nThese users can view the project but can make any changes to it.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project",
            "title": "Managing users & roles"
        },
        {
            "location": "/usage/project-config/roles/#adding-removing-users",
            "text": "If you are an admin or an owner for a project, you can add any user on GitHub (even if they haven't used Injectify before). As soon as they sign in for the first time, they'll be able to access the projects you've gave them access to.  Managing roles",
            "title": "Adding / removing users"
        },
        {
            "location": "/usage/project-config/roles/#different-types-of-roles",
            "text": "Below explains what the different roles are and what permissions they allow a user to have  Owners These users have full control over the project and can make any action they chose.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project Admins These users can manage who's able to access the project.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project View-only users These users can view the project but can make any changes to it.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project",
            "title": "Different types of roles"
        },
        {
            "location": "/usage/project-config/filters/",
            "text": "Tip\n\n\nYour project's filters control which domains the payloads are allowed or disallowed to run on. This is good for if someone abuses your project or if you need to temporarily filter out some users.\n\n\n\n\nAdding / removing filters\n\u00b6\n\n\nIf you are an admin or an owner for a project, you can edit, add and remove filters.\n\n\nManaging filters\nDifferent types of roles\n\u00b6\n\n\nBelow explains what the different roles are and what permissions they allow a user to have\n\n\nOwners\nThese users have full control over the project and can make any action they chose.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nAdmins\nThese users can manage who's able to access the project.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project\nView-only users\nThese users can view the project but can make any changes to it.\n Access to the projects data\n Execute commands on hooked browsers\n Add / remove view-only users\n Change the filters\n Add / remove owners\n Add / remove admins\n Rename the project\n Delete the project",
            "title": "Managing domain filters"
        },
        {
            "location": "/usage/project-config/filters/#adding-removing-filters",
            "text": "If you are an admin or an owner for a project, you can edit, add and remove filters.  Managing filters",
            "title": "Adding / removing filters"
        },
        {
            "location": "/usage/project-config/filters/#different-types-of-roles",
            "text": "Below explains what the different roles are and what permissions they allow a user to have  Owners These users have full control over the project and can make any action they chose.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project Admins These users can manage who's able to access the project.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project View-only users These users can view the project but can make any changes to it.  Access to the projects data  Execute commands on hooked browsers  Add / remove view-only users  Change the filters  Add / remove owners  Add / remove admins  Rename the project  Delete the project",
            "title": "Different types of roles"
        },
        {
            "location": "/usage/project-config/api/",
            "text": "Tip\n\n\nYour project's API allows you to get a JSON-response of stuff like currently hooked browser, saved passwords and the keylogger keystrokes.\n\n\n\n\nAccessing the API\n\u00b6\n\n\nIf you have permission to access a project, you can simply navigate to the config page and select the appropiate button.\n\n\n\n\nWarning\n\n\nDo not share the links to your project's API to anyone. They include your GitHub user token, which grants access to information about your account.\n\n\n\n\nAPI buttons",
            "title": "Project API"
        },
        {
            "location": "/usage/project-config/api/#accessing-the-api",
            "text": "If you have permission to access a project, you can simply navigate to the config page and select the appropiate button.   Warning  Do not share the links to your project's API to anyone. They include your GitHub user token, which grants access to information about your account.   API buttons",
            "title": "Accessing the API"
        },
        {
            "location": "/modules/",
            "text": "What are modules\n\u00b6\n\n\nDescription\n\u00b6\n\n\nModules are Javascript files that can be dynamically loaded from the server and executed on the client - with features such as parameters, callbacks and Typescript typings support.\n\n\nExample\nBy executing \ninjectify\n.\nmodule\n(\n'example'\n,\n \n'test'\n)\n, a request will be sent to load a module named \nexample\n with the parameters of \ntest\n.\nThis module is then parsed by the server and if the module contains server-side snippets, the server will execute them. Once complete, the server will send the module over to the client where it will be executed.\nThe module can run a variety of server-side snippets, including:\nShell commands\nFunctions - \nrequire()\n supported\nCalculations\nTools\n\u00b6\n\n\nWebpack\n\u00b6\n\n\nAll modules are preprocessed by \nwebpack\n into a single \nbundle.js\n. Webpack allows you to import NPM modules, create modular scripts and include local resources.\n\n\nWebpack imports\nTypescript (Optional)\n\u00b6\n\n\nYou can use Typescript to write next generation ES7 and have it compile to older-browser compatible javascript. All the necessary typings have been created & documented for you, so you can fully utilize the Injectify API\n\n\nVS Code intellisense\nFeatures\n\u00b6\n\n\nDeveloper-first experience\n\u00b6\n\n\nInjectify was built to be super easy to customize hence the reason to use NodeJS (instead of a lower-level langauge such as Java or C++).\n\n\nThe developer experience whilst developing modules is performant and easy to debug, all the below features are available when the client connects via debug mode\n\n\n\n\nSource code is un-minfified - viewable in the DevTools sources pane\n\n\nVerbose console output - module calls, stack traces etc.\n\n\nHot reloading - each time you make a change, the core is reloaded without the page reloading\n\n\nWebsocket inspection - request JSON inspectable\n\n\n\n\nDevtools enhancements",
            "title": "What are modules?"
        },
        {
            "location": "/modules/#what-are-modules",
            "text": "",
            "title": "What are modules"
        },
        {
            "location": "/modules/#description",
            "text": "Modules are Javascript files that can be dynamically loaded from the server and executed on the client - with features such as parameters, callbacks and Typescript typings support.  Example By executing  injectify . module ( 'example' ,   'test' ) , a request will be sent to load a module named  example  with the parameters of  test . This module is then parsed by the server and if the module contains server-side snippets, the server will execute them. Once complete, the server will send the module over to the client where it will be executed. The module can run a variety of server-side snippets, including: Shell commands Functions -  require()  supported Calculations",
            "title": "Description"
        },
        {
            "location": "/modules/#tools",
            "text": "",
            "title": "Tools"
        },
        {
            "location": "/modules/#webpack",
            "text": "All modules are preprocessed by  webpack  into a single  bundle.js . Webpack allows you to import NPM modules, create modular scripts and include local resources.  Webpack imports",
            "title": "Webpack"
        },
        {
            "location": "/modules/#typescript-optional",
            "text": "You can use Typescript to write next generation ES7 and have it compile to older-browser compatible javascript. All the necessary typings have been created & documented for you, so you can fully utilize the Injectify API  VS Code intellisense",
            "title": "Typescript (Optional)"
        },
        {
            "location": "/modules/#features",
            "text": "",
            "title": "Features"
        },
        {
            "location": "/modules/#developer-first-experience",
            "text": "Injectify was built to be super easy to customize hence the reason to use NodeJS (instead of a lower-level langauge such as Java or C++).  The developer experience whilst developing modules is performant and easy to debug, all the below features are available when the client connects via debug mode   Source code is un-minfified - viewable in the DevTools sources pane  Verbose console output - module calls, stack traces etc.  Hot reloading - each time you make a change, the core is reloaded without the page reloading  Websocket inspection - request JSON inspectable   Devtools enhancements",
            "title": "Developer-first experience"
        },
        {
            "location": "/modules/create/",
            "text": "Creating a module\n\u00b6\n\n\nCreating a module is easy and w",
            "title": "Creating a module"
        },
        {
            "location": "/modules/create/#creating-a-module",
            "text": "Creating a module is easy and w",
            "title": "Creating a module"
        },
        {
            "location": "/modules/api/",
            "text": "Tip\n\n\nThe Module API allows you to pass parameters, callback functions and utilize the module's global state API.\n\n\n\n\nOverview\n\u00b6\n\n\nEvery time a module is called a new \nModule\n object is created. This object gives access to the following:\n\n\nGetters\nThe modules current global state\nThe parameters passed to the module.\nThe name the module was called under.\nA unique token assigned for the call.\nSetters\nResolve / reject the modules Promise callback.\nUpdate the modules global state\nUsage\n\u00b6\n\n\nModule typings\nTypescript typings for the \nModule\n object:\n\nModule\n:\n \n{\n\n  \n/**\n\n\n   * The name the module was called as\n\n\n   */\n\n  \nname\n: \nstring\n\n  \n/**\n\n\n   * The parameters passed to the module\n\n\n   */\n\n  \nparams\n: \nany\n\n  \n/**\n\n\n   * Modules global state, persistent until the page is reloaded\n\n\n   */\n\n  \nstate\n: \nany\n\n  \n/**\n\n\n   * Updates the module's global state\n\n\n   * @param newState An object containing the new state\n\n\n   */\n\n  \nsetState\n: \nFunction\n\n  \n/**\n\n\n   * A unique token generated every time a module is called\n\n\n   */\n\n  \ntoken\n: \nstring\n\n  \n/**\n\n\n   * Resolve the modules calling Promise\n\n\n   */\n\n  \nresolve\n(\ndata?\n: \nany\n)\n:\n \nFunction\n\n  \n/**\n\n\n   * Reject the modules calling Promise\n\n\n   */\n\n  \nreject\n(\ndata?\n: \nany\n)\n:\n \nFunction\n\n  \n/**\n\n\n   * Whether or not the modules callback has been resolved\n\n\n   */\n\n  \nresolved\n: \nboolean\n\n\n}\n\n\nExamples\n\u00b6\n\n\nModule parameters\n\u00b6\n\n\nThe parameters allows you pass data to the module:\n\n\n\n\nCalling the module\n\n\n// Example 1\n\n\ninjectify\n.\nmodule\n(\n'example'\n,\n \n'example string'\n)\n\n\n\n// Example 2\n\n\ninjectify\n.\nmodule\n(\n'example'\n,\n \n{\n \nexample\n:\n \n1\n,\n \ndoIt\n:\n \ntrue\n \n})\n\n\n\n\n\n\n\n\n\nModule source code\n\n\n// Example 1\n\n\nconsole\n.\nlog\n(\nModule\n.\nparams\n)\n \n// \"example string\"\n\n\n\n// Example 2\n\n\nconsole\n.\nlog\n(\nModule\n.\nparams\n)\n \n// { example: 1, doIt: true }\n\n\n\n\n\n\n\n\n\nModule state\n\u00b6\n\n\nThe state allows you to globally store data across module calls:\n\n\n\n\nCalling the module\n\n\n// Example 1\n\n\ninjectify\n.\nmodule\n(\n'example'\n)\n\n\n\n// Example 2\n\n\ninjectify\n.\nmodule\n(\n'example'\n)\n\n\n\n\n\n\n\n\n\nModule source code\n\n\nif\n \n(\n!\nModule\n.\nstate\n)\n \n{\n\n  \nModule\n.\nsetState\n(\n123\n)\n\n  \nconsole\n.\nlog\n(\n`Set the state to \n${\nModule\n.\nstate\n}\n`\n)\n\n\n}\n \nelse\n \n{\n\n  \nconsole\n.\nlog\n(\n`Module state = \n${\nModule\n.\nstate\n}\n`\n)\n\n\n}\n\n\n\n// Example 1: Set the state to 123\n\n\n// Example 2: Module state = 123\n\n\n\n\n\n\n\n\n\nModule Promise callback\n\u00b6\n\n\nThe callback allows your module to sync / async return data to it's calling Promise.\n\n\n\n\nCalling the module\n\n\n// Example 1\n\n\ninjectify\n.\nmodule\n(\n'example'\n).\nthen\n(\ndata\n \n=>\n \n{\n\n  \nconsole\n.\nlog\n(\ndata\n)\n\n\n})\n \n// \"Returned data\"\n\n\n\n// Example 2\n\n\ninjectify\n.\nmodule\n(\n'example'\n).\nthen\n(\ndata\n \n=>\n \n{\n\n\n}).\ncatch\n(\nerr\n \n=>\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n)\n\n\n})\n  \n// \"My error\"\n\n\n\n\n\n\n\n\n\nModule source code\n\n\n// Example 1\n\n\nModule\n.\nresolve\n(\n'Returned data'\n)\n\n\n\n// Example 2\n\n\nModule\n.\nreject\n(\n'My error'\n)",
            "title": "Module API"
        },
        {
            "location": "/modules/api/#overview",
            "text": "Every time a module is called a new  Module  object is created. This object gives access to the following:  Getters The modules current global state The parameters passed to the module. The name the module was called under. A unique token assigned for the call. Setters Resolve / reject the modules Promise callback. Update the modules global state",
            "title": "Overview"
        },
        {
            "location": "/modules/api/#usage",
            "text": "Module typings Typescript typings for the  Module  object: Module :   { \n   /**     * The name the module was called as     */ \n   name :  string \n   /**     * The parameters passed to the module     */ \n   params :  any \n   /**     * Modules global state, persistent until the page is reloaded     */ \n   state :  any \n   /**     * Updates the module's global state     * @param newState An object containing the new state     */ \n   setState :  Function \n   /**     * A unique token generated every time a module is called     */ \n   token :  string \n   /**     * Resolve the modules calling Promise     */ \n   resolve ( data? :  any ) :   Function \n   /**     * Reject the modules calling Promise     */ \n   reject ( data? :  any ) :   Function \n   /**     * Whether or not the modules callback has been resolved     */ \n   resolved :  boolean  }",
            "title": "Usage"
        },
        {
            "location": "/modules/api/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/modules/api/#module-parameters",
            "text": "The parameters allows you pass data to the module:   Calling the module  // Example 1  injectify . module ( 'example' ,   'example string' )  // Example 2  injectify . module ( 'example' ,   {   example :   1 ,   doIt :   true   })     Module source code  // Example 1  console . log ( Module . params )   // \"example string\"  // Example 2  console . log ( Module . params )   // { example: 1, doIt: true }",
            "title": "Module parameters"
        },
        {
            "location": "/modules/api/#module-state",
            "text": "The state allows you to globally store data across module calls:   Calling the module  // Example 1  injectify . module ( 'example' )  // Example 2  injectify . module ( 'example' )     Module source code  if   ( ! Module . state )   { \n   Module . setState ( 123 ) \n   console . log ( `Set the state to  ${ Module . state } ` )  }   else   { \n   console . log ( `Module state =  ${ Module . state } ` )  }  // Example 1: Set the state to 123  // Example 2: Module state = 123",
            "title": "Module state"
        },
        {
            "location": "/modules/api/#module-promise-callback",
            "text": "The callback allows your module to sync / async return data to it's calling Promise.   Calling the module  // Example 1  injectify . module ( 'example' ). then ( data   =>   { \n   console . log ( data )  })   // \"Returned data\"  // Example 2  injectify . module ( 'example' ). then ( data   =>   {  }). catch ( err   =>   { \n   console . log ( err )  })    // \"My error\"     Module source code  // Example 1  Module . resolve ( 'Returned data' )  // Example 2  Module . reject ( 'My error' )",
            "title": "Module Promise callback"
        },
        {
            "location": "/modules/server-side/",
            "text": "Server-side snippets\n\u00b6\n\n\n\n\nTip\n\n\nServer-side execution allows you to run NodeJS snippets directly in your modules javascript file, similiar to PHP.\n\n\n\n\nExample\n\u00b6\n\n\nIn the below example \nLodash\n is used server-side to search for an object and generate a random number. The output of the commands is then directly available to the hooked browser.\n\n\n\n\nModule source code\n\n\nThis is what you put in your modules javascript file. When the client requests the module, the server evaluates calls to the \n$\n class using some magic \n\n\nlet\n \nactiveUser\n \n=\n \n$\n.\nFUNCTION\n(\n`\n\n\n  const _ = require('lodash')\n\n\n  return _.find([\n\n\n    { 'user': 'barney',  'age': 36, 'active': true },\n\n\n    { 'user': 'fred',    'age': 40, 'active': false },\n\n\n    { 'user': 'pebbles', 'age': 1,  'active': true }\n\n\n  ], 'active')\n\n\n`\n)\n\n\nconsole\n.\nlog\n(\nactiveUser\n)\n\n\n\nlet\n \nrandomNumber\n \n=\n \n$\n(\n_\n.\nrandom\n(\n100\n))\n\n\n\n\n\n\n\n\n\nParsed module output\n\n\nThis is what the server sends back to the client (aka the parsed output)\n\n\nlet\n \nactiveUser\n \n=\n \n{\n \n'user'\n:\n \n'barney'\n,\n \n'age'\n:\n \n36\n,\n \n'active'\n:\n \ntrue\n \n}\n\n\nconsole\n.\nlog\n(\nactiveUser\n)\n\n\n\nlet\n \nrandomNumber\n \n=\n \n46\n\n\n\n\n\n\n\nOverview\n\u00b6\n\n\nUse cases\n\u00b6\n\n\n\n\nMinimize network traffic between the server and client\n\n\nLarge libraries don't need to be sent to the client\n\n\nCPU intensive calculations can be performed on the server\n\n\n\n\n\n\nPerform web requests without worrying about CORS\n\n\nRandomize the modules actions to prevent reverse-engineering\n\n\nRun shell commands on the server\n\n\n\n\nIs it secure?\n\u00b6\n\n\nYes. The only way for server-side code to be executed is by placing it in the modules \nbundle.js\n. Code cannot be changed at processing time or by using the Web interfacce.\n\n\nDocumentation\n\u00b6\n\n\nTypescript typings\n\u00b6\n\n\nIf you are using Typescript, import the typings by adding the following to the top of your \nmodule\n.\nts\n\n\nimport\n \nModuleTypings\n \nfrom\n \n'../../../definitions/module'\n\n\ndeclare\n \nconst\n \n{\n \nModule\n,\n \ninjectify\n,\n \n$\n \n}\n \n:\n \nModuleTypings\n\n\n\n\n\nTypings for the \n$\n global class\n$\n:\n \n{\n\n  \n/**\n\n\n   * Performs an expression / function on the server and returns the value. Type checking is disabled\n\n\n   */\n\n  \n_\n(\ndata\n: \nFunction\n \n|\n \nString\n \n|\n \nObject\n \n|\n \nNumber\n \n|\n \nBoolean\n \n|\n \nany\n)\n:\n \nany\n\n\n  \n/**\n\n\n   * Executes shell commands on the server and returns output\n\n\n   * @returns {string} stdout of the command\n\n\n   */\n\n  \nSHELL\n(\ncommands\n: \nString\n)\n:\n \nString\n\n\n  \n/**\n\n\n   * Runs a NodeJS code snippet on the server\n\n\n   * @returns {any} The return value of the function\n\n\n   */\n\n  \nFUNCTION\n(\nscript\n: \nString\n \n|\n \nFunction\n)\n:\n \nany\n\n\n  \n/**\n\n\n   * Returns a javascript object populated with server-processed keys\n\n\n   * Type-checking - If the result is not an object, the module won't execute\n\n\n   */\n\n  \nOBJECT\n(\ndata\n: \nString\n \n|\n \nObject\n)\n:\n \n{[\nkey\n: \nstring\n]\n:\n \nany\n}\n\n\n  \n/**\n\n\n   * Returns a number evaluated from an expression\n\n\n   * Type-checking - If the result is not a number, the module won't execute\n\n\n   */\n\n  \nNUMBER\n(\ndata\n: \nNumber\n \n|\n \nString\n)\n:\n \nNumber\n\n\n  \n/**\n\n\n   * Returns a string evaluated from an expression\n\n\n   * Type-checking - If the result is not a string, the module won't execute\n\n\n   */\n\n  \nSTRING\n(\ndata\n: \nString\n)\n:\n \nString\n\n\n  \n/**\n\n\n   * Returns a array evaluated from an expression.\n\n\n   * Type-checking - If the result is not an array, the module won't execute\n\n\n   */\n\n  \nARRAY\n(\ndata\n: \nany\n[]\n \n|\n \nstring\n)\n:\n \nany\n[]\n\n\n  \n/**\n\n\n   * Returns a boolean evaluated from an expression.\n\n\n   * Type-checking - If the result is not an array, the module won't execute\n\n\n   */\n\n  \nBOOLEAN\n(\ndata\n: \nboolean\n \n|\n \nstring\n)\n:\n \nboolean\n\n\n  \n/**\n\n\n   * Writes data to the servers filesystem\n\n\n   */\n\n  \nWRITE\n(\nfilename\n: \nstring\n,\n \ndata\n: \nstring\n)\n:\n \nvoid\n\n\n}\n\n\n\n\nDynamic methods\n\u00b6\n\n\nDynamic methods are quick and easy to use and suited for most use cases. They allow you to quickly evaluate and return data. They are evaluated in the same process as the server - have access to all the same variables & NodeJS APIs\n\n\n\n\nNote\n\n\nIf you intend to use functions which make use of \nrequire()\n, or Typescript is throwing errors, you should use \nFixed Methods\n\n\n\n\n\n\nModule source code\n\n\nExample:\n\n\nlet\n \nbool\n   \n=\n \n$\n.\n_\n(\n2\n \n>\n \n1\n)\n\n\nlet\n \nobject\n \n=\n \n$\n.\n_\n({\n \na\n:\n \n'b'\n \n})\n\n\nlet\n \narray\n  \n=\n \n$\n.\n_\n([\n1\n,\n2\n,\n3\n])\n\n\nlet\n \nstring\n \n=\n \n$\n.\n_\n(\n'test'\n)\n\n\nlet\n \nfunc\n   \n=\n \n$\n.\n_\n(()\n \n=>\n \n{\n \nreturn\n \n'func value'\n \n}))\n\n\n\n\n\nOutput:\n\n\nlet\n \nbool\n   \n=\n \ntrue\n\n\nlet\n \nobject\n \n=\n \n{\n\"a\"\n:\n\"b\"\n}\n\n\nlet\n \narray\n  \n=\n \n[\n1\n,\n2\n,\n3\n]\n\n\nlet\n \nstring\n \n=\n \n\"test\"\n\n\nlet\n \nfunc\n   \n=\n \n\"func value\"\n\n\n\n\n\n\n\nFixed methods\n\u00b6\n\n\nFixed methods are used when you want to:\n\n\n\n\nEnhance & prevent typescript errors\n\n\nPrevent webpack from transforming the snippets\n\n\n\n\nFunctions\n\u00b6\n\n\nFixed functions can be escaped in quotes to prevent Webpack conflicts and Typescript errors (eg. \nrequire()\n being converted to \n__webpack_require__\n)\n\n\n\n\nModule source code\n\n\nNormal:\n\n\nlet\n \nuptime\n \n=\n \n$\n.\nFUNCTION\n(()\n \n=>\n \n{\n\n \nconst\n \nos\n \n=\n \nrequire\n(\n'os'\n)\n\n \nreturn\n \nos\n.\nuptime\n()\n\n\n})\n\n\n\n\n\nEscaped:\n\n\nlet\n \nuptime\n \n=\n \n$\n.\nFUNCTION\n(\n`() => {\n\n\n const os = require('os')\n\n\n return os.uptime()\n\n\n}`\n)\n\n\n\n\n\nYou can also omit the arrow function:\n\n\nlet\n \nuptime\n \n=\n \n$\n.\nFUNCTION\n(\n`\n\n\n const os = require('os')\n\n\n return os.uptime()\n\n\n`\n)\n\n\n\n\n\nOutput:\n\n\nlet\n \nuptime\n \n=\n \n4523\n\n\n\n\n\n\n\nObjects & Arrays\n\u00b6\n\n\n\n\nModule source code\n\n\nNormal:\n\n\nlet\n \nobject\n \n=\n \n$\n.\nOBJECT\n({\n\n  \nuptime\n:\n \nprocess\n.\nuptime\n()\n\n\n})\n\n\nlet\n \narray\n \n=\n \n$\n.\nARRAY\n([\n+\nnew\n \nDate\n(),\n \n1\n+\n2\n])\n\n\n\n\n\nEscaped:\n\n\nlet\n \nobject\n \n=\n \n$\n.\nOBJECT\n(\n`{\n\n\n  uptime: process.uptime()\n\n\n}`\n)\n\n\nlet\n \narray\n \n=\n \n$\n.\nARRAY\n(\n`[+new Date(), 1+2]`\n)\n\n\n\n\n\nOutput:\n\n\nlet\n \nobject\n \n=\n \n{\n\"uptime\"\n:\n4523\n}\n\n\nlet\n \narray\n \n=\n \n[\n1519876291276\n,\n \n3\n]\n\n\n\n\n\n\n\nStrings, Numbers & Booleans\n\u00b6\n\n\n\n\nModule source code\n\n\nNormal:\n\n\nlet\n \nstring\n \n=\n \n$\n.\nSTRING\n(\n`The Date is \n${\nnew\n \nDate\n()\n}\n`\n)\n\n\nlet\n \nnumber\n \n=\n \n$\n.\nNUMBER\n(\n+\nnew\n \nDate\n())\n\n\nlet\n \nboolean\n \n=\n \n$\n.\nBOOLEAN\n(\n2\n \n>\n \n1\n)\n\n\n\n\n\nEscaped:\n\n\nlet\n \nstring\n \n=\n \n$\n.\nSTRING\n(\n\"`The Date is ${new Date()}`\"\n)\n\n\nlet\n \nnumber\n \n=\n \n$\n.\nNUMBER\n(\n`+new Date()`\n)\n\n\nlet\n \nboolean\n \n=\n \n$\n.\nBOOLEAN\n(\n`2 > 1`\n)\n\n\n\n\n\nOutput:\n\n\nlet\n \nstring\n \n=\n \n\"The Date is Thu Mar 01 2018\"\n\n\nlet\n \nnumber\n \n=\n \n1519876291276\n\n\nlet\n \nboolean\n \n=\n \ntrue\n\n\n\n\n\n\n\nShell commands\n\u00b6\n\n\nYou can easily perform shell commands on the server and retrieve the standard output stream. Uses \nshelljs\n and the synchronous \nshelljs.exec()\n method\n\n\n\n\nModule source code\n\n\nSource:\n\n\nlet\n \nstdout\n \n=\n \n$\n.\nSHELL\n(\n`echo Hello world, the date is \n${\nnew\n \nDate\n()\n}\n`\n)\n\n\n\n\n\nOutput:\n\n\nlet\n \nstdout\n \n=\n \n\"Hello world, the date is Sun Mar 04 2018 19:13:40 GMT+0000\\r\\n\"\n\n\n\n\n\n\n\nFilesystem commands\n\u00b6\n\n\nEach module has it's own designated \n./data\n folder in which you can write and append to files.\n\n\n\n\nModule source code\n\n\nExample:\n\n\n$\n.\nWRITE\n(\n`\n${\ninjectify\n.\ninfo\n.\nip\n.\nquery\n}\n.txt`\n,\n \nModule\n.\nparams\n)\n\n\n\n\n\nEach time the module is called, it will create a text file with the clients IP address as the filename and append the Modules parameters to that file.\n\n\n\n\nAPI\n\u00b6\n\n\nRuntime variables\n\u00b6\n\n\nEach time the module is called, the server inserts the \ninjectify\n and \nModule\n methods into the snippet's scope.\n\n\nThis basically means you can seamlessly access client-side variables such as \nModule\n.\nparams\n & \ninjectify.info.ip\n etc.\n\n\n\n\nNote\n\n\nThese variables are replicated server-side based on the Injectify API. This means that not all methods exist (eg. \nModule\n.\nresolve\n) and what the client actually has may differ.\n\n\n\n\n\n\nModule source code\n\n\nSource:\n\n\nconsole\n.\nlog\n(\n$\n.\n_\n(\ninjectify\n.\ninfo\n))\n\n\nconsole\n.\nlog\n(\n$\n.\n_\n(\nModule\n))\n\n\n\n\n\nOutput:\n\n\nconsole\n.\nlog\n({\n\n  \nid\n:\n \n'5dba5160-fb72-4ea6-a9da-d27df1864dc9'\n,\n\n  \ndebug\n:\n \ntrue\n,\n\n  \nproject\n:\n \n'private'\n,\n\n  \nip\n:\n \n{\n \nquery\n:\n \n'127.0.0.1'\n \n}\n\n  \nwindow\n:\n \n...,\n\n  \ndevtools\n:\n \n...,\n\n  \nsocket\n:\n \n...,\n\n  \n...\n\n\n})\n\n\nconsole\n.\nlog\n({\n\n  \nname\n:\n \n'example'\n,\n\n  \ntoken\n:\n \n'b9ab7ae4-538c-53a7-498a-409fb2bf1943'\n\n\n})",
            "title": "Server-side snippets"
        },
        {
            "location": "/modules/server-side/#server-side-snippets",
            "text": "Tip  Server-side execution allows you to run NodeJS snippets directly in your modules javascript file, similiar to PHP.",
            "title": "Server-side snippets"
        },
        {
            "location": "/modules/server-side/#example",
            "text": "In the below example  Lodash  is used server-side to search for an object and generate a random number. The output of the commands is then directly available to the hooked browser.   Module source code  This is what you put in your modules javascript file. When the client requests the module, the server evaluates calls to the  $  class using some magic   let   activeUser   =   $ . FUNCTION ( `    const _ = require('lodash')    return _.find([      { 'user': 'barney',  'age': 36, 'active': true },      { 'user': 'fred',    'age': 40, 'active': false },      { 'user': 'pebbles', 'age': 1,  'active': true }    ], 'active')  ` )  console . log ( activeUser )  let   randomNumber   =   $ ( _ . random ( 100 ))     Parsed module output  This is what the server sends back to the client (aka the parsed output)  let   activeUser   =   {   'user' :   'barney' ,   'age' :   36 ,   'active' :   true   }  console . log ( activeUser )  let   randomNumber   =   46",
            "title": "Example"
        },
        {
            "location": "/modules/server-side/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/modules/server-side/#use-cases",
            "text": "Minimize network traffic between the server and client  Large libraries don't need to be sent to the client  CPU intensive calculations can be performed on the server    Perform web requests without worrying about CORS  Randomize the modules actions to prevent reverse-engineering  Run shell commands on the server",
            "title": "Use cases"
        },
        {
            "location": "/modules/server-side/#is-it-secure",
            "text": "Yes. The only way for server-side code to be executed is by placing it in the modules  bundle.js . Code cannot be changed at processing time or by using the Web interfacce.",
            "title": "Is it secure?"
        },
        {
            "location": "/modules/server-side/#documentation",
            "text": "",
            "title": "Documentation"
        },
        {
            "location": "/modules/server-side/#typescript-typings",
            "text": "If you are using Typescript, import the typings by adding the following to the top of your  module . ts  import   ModuleTypings   from   '../../../definitions/module'  declare   const   {   Module ,   injectify ,   $   }   :   ModuleTypings   Typings for the  $  global class $ :   { \n   /**     * Performs an expression / function on the server and returns the value. Type checking is disabled     */ \n   _ ( data :  Function   |   String   |   Object   |   Number   |   Boolean   |   any ) :   any \n\n   /**     * Executes shell commands on the server and returns output     * @returns {string} stdout of the command     */ \n   SHELL ( commands :  String ) :   String \n\n   /**     * Runs a NodeJS code snippet on the server     * @returns {any} The return value of the function     */ \n   FUNCTION ( script :  String   |   Function ) :   any \n\n   /**     * Returns a javascript object populated with server-processed keys     * Type-checking - If the result is not an object, the module won't execute     */ \n   OBJECT ( data :  String   |   Object ) :   {[ key :  string ] :   any } \n\n   /**     * Returns a number evaluated from an expression     * Type-checking - If the result is not a number, the module won't execute     */ \n   NUMBER ( data :  Number   |   String ) :   Number \n\n   /**     * Returns a string evaluated from an expression     * Type-checking - If the result is not a string, the module won't execute     */ \n   STRING ( data :  String ) :   String \n\n   /**     * Returns a array evaluated from an expression.     * Type-checking - If the result is not an array, the module won't execute     */ \n   ARRAY ( data :  any []   |   string ) :   any [] \n\n   /**     * Returns a boolean evaluated from an expression.     * Type-checking - If the result is not an array, the module won't execute     */ \n   BOOLEAN ( data :  boolean   |   string ) :   boolean \n\n   /**     * Writes data to the servers filesystem     */ \n   WRITE ( filename :  string ,   data :  string ) :   void  }",
            "title": "Typescript typings"
        },
        {
            "location": "/modules/server-side/#dynamic-methods",
            "text": "Dynamic methods are quick and easy to use and suited for most use cases. They allow you to quickly evaluate and return data. They are evaluated in the same process as the server - have access to all the same variables & NodeJS APIs   Note  If you intend to use functions which make use of  require() , or Typescript is throwing errors, you should use  Fixed Methods    Module source code  Example:  let   bool     =   $ . _ ( 2   >   1 )  let   object   =   $ . _ ({   a :   'b'   })  let   array    =   $ . _ ([ 1 , 2 , 3 ])  let   string   =   $ . _ ( 'test' )  let   func     =   $ . _ (()   =>   {   return   'func value'   }))   Output:  let   bool     =   true  let   object   =   { \"a\" : \"b\" }  let   array    =   [ 1 , 2 , 3 ]  let   string   =   \"test\"  let   func     =   \"func value\"",
            "title": "Dynamic methods"
        },
        {
            "location": "/modules/server-side/#fixed-methods",
            "text": "Fixed methods are used when you want to:   Enhance & prevent typescript errors  Prevent webpack from transforming the snippets",
            "title": "Fixed methods"
        },
        {
            "location": "/modules/server-side/#functions",
            "text": "Fixed functions can be escaped in quotes to prevent Webpack conflicts and Typescript errors (eg.  require()  being converted to  __webpack_require__ )   Module source code  Normal:  let   uptime   =   $ . FUNCTION (()   =>   { \n  const   os   =   require ( 'os' ) \n  return   os . uptime ()  })   Escaped:  let   uptime   =   $ . FUNCTION ( `() => {   const os = require('os')   return os.uptime()  }` )   You can also omit the arrow function:  let   uptime   =   $ . FUNCTION ( `   const os = require('os')   return os.uptime()  ` )   Output:  let   uptime   =   4523",
            "title": "Functions"
        },
        {
            "location": "/modules/server-side/#objects-arrays",
            "text": "Module source code  Normal:  let   object   =   $ . OBJECT ({ \n   uptime :   process . uptime ()  })  let   array   =   $ . ARRAY ([ + new   Date (),   1 + 2 ])   Escaped:  let   object   =   $ . OBJECT ( `{    uptime: process.uptime()  }` )  let   array   =   $ . ARRAY ( `[+new Date(), 1+2]` )   Output:  let   object   =   { \"uptime\" : 4523 }  let   array   =   [ 1519876291276 ,   3 ]",
            "title": "Objects &amp; Arrays"
        },
        {
            "location": "/modules/server-side/#strings-numbers-booleans",
            "text": "Module source code  Normal:  let   string   =   $ . STRING ( `The Date is  ${ new   Date () } ` )  let   number   =   $ . NUMBER ( + new   Date ())  let   boolean   =   $ . BOOLEAN ( 2   >   1 )   Escaped:  let   string   =   $ . STRING ( \"`The Date is ${new Date()}`\" )  let   number   =   $ . NUMBER ( `+new Date()` )  let   boolean   =   $ . BOOLEAN ( `2 > 1` )   Output:  let   string   =   \"The Date is Thu Mar 01 2018\"  let   number   =   1519876291276  let   boolean   =   true",
            "title": "Strings, Numbers &amp; Booleans"
        },
        {
            "location": "/modules/server-side/#shell-commands",
            "text": "You can easily perform shell commands on the server and retrieve the standard output stream. Uses  shelljs  and the synchronous  shelljs.exec()  method   Module source code  Source:  let   stdout   =   $ . SHELL ( `echo Hello world, the date is  ${ new   Date () } ` )   Output:  let   stdout   =   \"Hello world, the date is Sun Mar 04 2018 19:13:40 GMT+0000\\r\\n\"",
            "title": "Shell commands"
        },
        {
            "location": "/modules/server-side/#filesystem-commands",
            "text": "Each module has it's own designated  ./data  folder in which you can write and append to files.   Module source code  Example:  $ . WRITE ( ` ${ injectify . info . ip . query } .txt` ,   Module . params )   Each time the module is called, it will create a text file with the clients IP address as the filename and append the Modules parameters to that file.",
            "title": "Filesystem commands"
        },
        {
            "location": "/modules/server-side/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/modules/server-side/#runtime-variables",
            "text": "Each time the module is called, the server inserts the  injectify  and  Module  methods into the snippet's scope.  This basically means you can seamlessly access client-side variables such as  Module . params  &  injectify.info.ip  etc.   Note  These variables are replicated server-side based on the Injectify API. This means that not all methods exist (eg.  Module . resolve ) and what the client actually has may differ.    Module source code  Source:  console . log ( $ . _ ( injectify . info ))  console . log ( $ . _ ( Module ))   Output:  console . log ({ \n   id :   '5dba5160-fb72-4ea6-a9da-d27df1864dc9' , \n   debug :   true , \n   project :   'private' , \n   ip :   {   query :   '127.0.0.1'   } \n   window :   ..., \n   devtools :   ..., \n   socket :   ..., \n   ...  })  console . log ({ \n   name :   'example' , \n   token :   'b9ab7ae4-538c-53a7-498a-409fb2bf1943'  })",
            "title": "Runtime variables"
        },
        {
            "location": "/demos/interface/",
            "text": "Below are some recordings of Injectify in action.\n\n\nVirtual client tabs\nConsole replication\nConsole data types\nEditor module intellisense\nEditor intellisense\nLive updates\nTab manipulation",
            "title": "Interface demos"
        }
    ]
}